{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAKhCC,EAAa,KACbC,EAAY,KACZC,EAAc,KAEZC,EAAgB,SAACC,EAAUC,GAChC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5BC,YAAW,WACYC,KAAKC,SAAW,GAErCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAElBA,E,KA8BLR,EAAKe,iBAAiB,UA1BP,SAACC,GACfA,EAAEC,iBACGD,EAAEE,OAAOC,QAEd,IAEmBC,EAAfJ,EAAEK,cADLC,SAAYC,EAAKH,EAALZ,MAAOgB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAG1BtB,EAAauB,OAAOH,EAAMI,OAC1BvB,EAAYsB,OAAOF,EAAKG,OACxBtB,EAAcqB,OAAOD,EAAOE,OAE5B,IAAK,IAAIC,EAAI,EAAGA,GAAKvB,EAAauB,IACjCtB,EAAcsB,EAAGzB,GACf0B,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBV,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE7D0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACnBV,EAAAiC,OAAOI,QAAQ,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE5DL,GAAcC,EAGfY,EAAEK,cAAce,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\nconst form = document.querySelector(\".form\");\n// const amount = document.querySelector(\"[amount]\");\n// const delay = document.querySelector(\"[delay]\");\n// const step = document.querySelector(\"[step]\");\n\nlet delayInput = null;\nlet stepInput = null;\nlet amountInput = null;\n\nconst createPromise = (position, delay) => {\n\treturn new Promise((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tconst shouldResolve = Math.random() > 0.3;\n\t\t\tif (shouldResolve) {\n\t\t\t\tresolve({ position, delay });\n\t\t\t} else {\n\t\t\t\treject({ position, delay });\n\t\t\t}\n\t\t}, delay);\n\t});\n};\n\nconst submit = (e) => {\n\te.preventDefault();\n\tif (!e.target.tagName === \"BUTTON\") return;\n\n\tconst {\n\t\telements: { delay, step, amount },\n\t} = e.currentTarget;\n\n\tdelayInput = Number(delay.value);\n\tstepInput = Number(step.value);\n\tamountInput = Number(amount.value);\n\n\tfor (let i = 1; i <= amountInput; i++) {\n\t\tcreatePromise(i, delayInput)\n\t\t\t.then(({ position, delay }) => {\n\t\t\t\tNotify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n\t\t\t})\n\t\t\t.catch(({ position, delay }) => {\n\t\t\t\tNotify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n\t\t\t});\n\t\tdelayInput += stepInput;\n\t}\n\n\te.currentTarget.reset();\n};\n\nform.addEventListener(\"submit\", submit);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","target","tagName","_elements","currentTarget","elements","delay1","step","amount","Number","value","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.a0ce338a.js.map"}